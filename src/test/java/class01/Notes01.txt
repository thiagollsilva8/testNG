TestNG (Test Next Generation) is a testing framework designed to enhance the capabilities of the
java programming language for software testing purposes. It is inspired by jUnit and NUnit,
but with additional features and flexibility.

--------------------------------------------testNG---------------------------

TestNG is a tool;
it can be used to unit test, integration test e.t.c
no main needed if you're working with testNG


Annotations:

1.@Test:
All the test cases must be written down under the annotation of @Test.


whenever u run a class , it is going to execute each and every method under the annotation of
@Test.

by deafult @Test annotation follows alphabetical order of execution of the test cases

e.g public void atestcase(); --> will execute first
    public void btestcase();-->will execute second

    the green tick indicates that test case has passed
    the red sign indicates the test case has failed



@BeforeMethod annotation:

the code under this annotation is going to execute every time before each and every @Test execution is made



@AfterMethod annotation :

the code under this annotation is going to execute after every test Method (after every @TEST)



 ----------------------------------------------Revision---------------------------------------
 1.What is xml?
  Xml is file format

 2.How to create a maven project?

 file-->new-->project
 new Project--> build system (maven)


 3.POM.XML?
  it is an XML file

  we can add our dependencies here for the project


 4.In POM.xml how do i ad dependencies?

 <dependencies>
        <dependency>
              <groupID>Selenium.org</groupID>
              <artifactId> selenium-java </artifactid>
              <version>3.15.7</version>
        </dependency>

         <dependency>


        </dependency>

 </dependencies>



 5.What are the annotations?

 a.@Test --> all the test cases are written in this annotation


 b.@BeforeMethod--> this runs before every @Test annotation    -->Pre-Conditions

 c. @AfterMethod -->  this will run after each @Test annotation  -->Post--condition


 6. what is the purpose of enable disable?

 @Test(enabled=false)  --> it will not run this test case  --> we might use this if we want to not run a test case

 7.Depends on what is the purpose?

 @Test(dependsOnMethods ={"login"})   --> this test case depends on login and will be only executed if Login  "Passes";



 8.Priority?

 By default, the priority is 0 --> the highest order

 if two cases are there with 0 priority --> alphabetically ascending will be followed

 @Test(priority =3)
 ABC
 @Test(priority =1)
 DEF
 @Test(priority =2)
 GHI

 what will be the execution order of these test cases

 DEF
 GHI
 ABC
 ----------------