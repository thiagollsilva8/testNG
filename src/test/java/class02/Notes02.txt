***********************TestNG*************************
Assertions:
we are not using if else condition because even if the test case fails (i.e the condition doesn't pass in if)
the testNG will still show it has passed
in order to overcome that we use
Assertions from testNG
the library is Assert,
and we call different types of assertions from it

the first assertion that we learned is
1. Assert.AssertEquals(String , String)
it compares two strings if they are an equal test case passed else fails.

2.Assert.AssetTrue(boolean)--> if the boolean is True, the Assertion will pass
								if the boolean is false, the assertion will fail


1.HardAssertions
As soon as any assertion FAIlS it doesn't check for other assertions , marks the test as failed and quits


Assert.Assertequals(Expected value,Actual Value)-->if they are equal your test case will pass
`												--> if they are not equal your test case is going to FAIL



2.SoftAssertions:

Soft assertion will execute all assertions that are there despite the fact that they FAIL or PASS,
and once it has evaluated them all, then it will mark the test case as
Failed or Passed
(it marks it failed even if one assertion has failed)

The advantage of using soft assert is that we can
see what errors we are having in other assertions that we make in the same test case,
but we cant see them if we use hard-assertion as IT WILL EXIT AS SOON AS THE FIRST ASSERTION FAILS

method to implement:
1. declare the instance
softAssert soft =new softAssert();
2. make assertions

soft.assertEquals();

3. at the end of making all assertions,
you must do
soft.assertALL()

this evaluates whether the test case has to be marked passed or failed






TestNg XMl:
Gives us the control to decide what to execute from the whole project

1. we can decide which package to execute
2. we can decide which specific class to execute
3. we can decide which methods to execute



Task1:
Class wise execution of Project suing testNg XML:


<suite>
    <test >


        <classes>
            <class name="class02.enableDisable"></class>
            <class name="class01.testNGannotations"></class>
            <class name="class02.priority"></class>
        </classes>

    </test>
</suite>




Task2:
Method Wise execution

<suite>
    <test >
    		<classes>
    			<class>
    		   		<methods>
                    		<include name="ThirdTest"></include>
                    		<include name="FourthTest"></include>
                    		<include name="FirstTest"></include>
                    		<include name="SecondTest"></include>
                	</methods>
                </class>
              </classes>

    </test>
</suite>


Task3: package-based Execution:
<suite name="All Test Suite">
    <test>
      <packages>
          <package name="class01"></package>
      </packages>
    </test>
</suite>



Task4:
Group-based execution
helps you run batch execution
e.g., you might want to run all the tst cases categorized under smoke testing,
or you might want to run all test cases under the regression testing,
or you might want to run all the test cases belonging to login fucntionality

Syntax:
<suite>
    <test >
        <groups>
            <run>
                <include name="regression"></include>
            </run>
        </groups>
        then u define class or package on which you want this to implement
        <packages>
            <package name="class02"></package>
        </packages>

    </test>

</suite>

Note:
if you have a before or after method annotation associated with
a particular @test annotation marked with some kind of group
then you must must mark you BEFORE AND AFTER method
to (alwaysRun=ture)